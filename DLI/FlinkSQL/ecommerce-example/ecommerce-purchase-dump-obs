/**    
    STREAM from Kafka
	session_uuid, transaction_uuid, timestamp, idUser, product_identifier, quantity, time_spent

**/

CREATE SOURCE STREAM source_ecommerce_purchase_rich (
	session_uuid STRING,
	transaction_uuid STRING,
	my_timestamp INT,
	quantity INT,
	time_spent DOUBLE,
	idProduct INT,
	product_identifier STRING,
	title STRING,
	brand STRING,
	price DOUBLE,
	idUser INT,
	gender STRING,
	age INT,
	age_category STRING,
	country STRING,
	city STRING,
	idCategory INT,
	category STRING
) WITH (
	type = "kafka",
	kafka_bootstrap_servers = "{{kafka_brokers}}",
	kafka_group_id = "source_ecommerce_purchase_top_product-consumer_group",
	kafka_topic = "ecommerce-bought-rich-topic",
	encode = "json"
);


/**    
    SINK in OBS
	
**/

CREATE SINK STREAM sink_source_ecommerce_purchase_rich_obs (
	session_uuid STRING,
	transaction_uuid STRING,
	my_timestamp INT,
	quantity INT,
	time_spent DOUBLE,
	idProduct INT,
	product_identifier STRING,
	title STRING,
	brand STRING,
	price DOUBLE,
	idUser INT,
	gender STRING,
	age INT,
	age_category STRING,
	country STRING,
	city STRING,
	idCategory INT,
	category STRING
)
  WITH (
    type = "obs",
    encode = "csv",
    region =  "ap-southeast-3",
    field_delimiter = ",",
    row_delimiter = "\n",
    obs_dir = "democenter/landing_zone/ecommerce/kafka_dump/sink_ecommerce_purchase_product_customer_info_category_obs",
    file_prefix = "viewed_products",
    rolling_size = "10m",
    ROLLING_INTERVAL = "yyyy/MM/dd/HH"
);


/**    
    OPERATIONS
	
**/

-- Window per minute, aggrupating by product_identifier per country
INSERT INTO sink_source_ecommerce_purchase_rich_obs
SELECT * FROM source_ecommerce_purchase_rich;	

