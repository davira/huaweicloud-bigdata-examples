/**    
    STREAM from Kafka
	session_uuid, transaction_uuid, timestamp, idUser, product_identifier, quantity, time_spent

**/

CREATE SOURCE STREAM source_ecommerce_purchase (
  session_uuid STRING,
  transaction_uuid STRING,
  my_timestamp INT,
  idUser INT,
  product_identifier STRING,
  quantity INT,
  time_spent DOUBLE
) WITH (
  type = "kafka",
  kafka_bootstrap_servers = "{{kafka_brokers}}",
  kafka_group_id = "source_ecommerce-purchase-add-info-consumer_group",
  kafka_topic = "ecommerce-bought-topic",
  encode = "csv"
);


/**    
	############# DIMENSION TABLE #############        
	#### Category ####
		
	Cache: 1 hours (60 sec * 60 min * 1000 ms)
**/

CREATE TABLE dimension_ecommerce_customer_info (
	idCustomer INT,
	gender STRING,
	age INT,
	country STRING,
	city STRING
) WITH (
	type = "rds",
	username = "root",
	password = "{{mysql_password}}",
	db_url = "mysql://192.168.100.100:3306/{{ecommerce_schema}}",
-- 	cache_time = "3600000",
	table_name = "customer_info",
	db_columns = "idCustomer,gender,age,country,city"
);

CREATE TABLE dimension_ecommerce_product (
	idProduct INT,
	product_identifier STRING,
	title STRING,
	brand STRING,
	price DOUBLE
) WITH (
	type = "rds",
	username = "root",
	password = "{{mysql_password}}",
	db_url = "mysql://192.168.100.100:3306/{{ecommerce_schema}}",
-- 	cache_time = "3600000",
	table_name = "product",
	db_columns = "idProduct,product_identifier,title,brand,price"
);

CREATE TABLE dimension_ecommerce_category (
	idCategory INT,
	category STRING,
	subcategory STRING,
	product_identifier STRING
) WITH (
	type = "rds",
	username = "root",
	password = "{{mysql_password}}",
	db_url = "mysql://192.168.100.100:3306/{{ecommerce_schema}}",
	-- cache_time = "3600000",
	table_name = "category"
);


/**    
	############# TEMPORAL TABLES #############        
	
**/


CREATE TEMP STREAM temp_ecommerce_purchase_product_customer_info (
	session_uuid STRING,
	transaction_uuid STRING,
	my_timestamp INT,
	quantity INT,
	time_spent DOUBLE,
	idProduct INT,
	product_identifier STRING,
	title STRING,
	brand STRING,
	price DOUBLE,
	idCustomer INT,
	gender STRING,
	age INT,
	age_category STRING,
	country STRING,
	city STRING
);


/**    
    SINK in RDS MySQL
	
**/

-- CREATE SINK STREAM sink_ecommerce_purchase_product_customer_info (
-- 	session_uuid STRING,
-- 	transaction_uuid STRING,
-- 	my_timestamp INT,
-- 	quantity INT,
-- 	time_spent DOUBLE,
-- 	idProduct INT,
-- 	product_identifier STRING,
-- 	title STRING,
-- 	brand STRING,
-- 	price DOUBLE,
-- 	idUser INT,
-- 	gender STRING,
-- 	age INT,
-- 	age_category STRING,
-- 	country STRING,
-- 	city STRING
-- ) WITH (
-- 	type = "kafka",
-- 	kafka_bootstrap_servers = "{{kafka_brokers}}",
-- 	kafka_group_id = "sink_ecommerce_purchase_product_customer_info-consumer_group",
-- 	kafka_topic = "ecommerce-bought-rich-topic",
-- 	encode = "json"
-- -- 	type = "rds",
-- -- 	username = "root",
-- -- 	password = "{{mysql_password}}",
-- -- 	db_url = "mysql://192.168.100.100:3306/{{ecommerce_schema}}",
-- -- 	table_name = "purchase_product_customer_info"
-- );


CREATE SINK STREAM sink_ecommerce_purchase_product_customer_info_category (
	session_uuid STRING,
	transaction_uuid STRING,
	my_timestamp INT,
	quantity INT,
	time_spent DOUBLE,
	idProduct INT,
	product_identifier STRING,
	title STRING,
	brand STRING,
	price DOUBLE,
	idUser INT,
	gender STRING,
	age INT,
	age_category STRING,
	country STRING,
	city STRING,
	idCategory INT,
	category STRING
) WITH (
	type = "kafka",
	kafka_bootstrap_servers = "{{kafka_brokers}}",
	kafka_group_id = "sink_ecommerce_purchase_product_customer_info_category-consumer_group",
	kafka_topic = "ecommerce-bought-rich-topic",
	encode = "json"
-- 	type = "rds",
-- 	username = "root",
-- 	password = "{{mysql_password}}",
-- 	db_url = "mysql://192.168.100.100:3306/{{ecommerce_schema}}",
-- 	table_name = "purchase_product_customer_info"
);


CREATE SINK STREAM sink_ecommerce_purchase_product_customer_info_all_category (
	session_uuid STRING,
	transaction_uuid STRING,
	my_timestamp INT,
	quantity INT,
	time_spent DOUBLE,
	idProduct INT,
	product_identifier STRING,
	title STRING,
	brand STRING,
	price DOUBLE,
	idUser INT,
	gender STRING,
	age INT,
	age_category STRING,
	country STRING,
	city STRING,
	idCategory INT,
	category STRING,
	subcategory STRING
) WITH (
	type = "kafka",
	kafka_bootstrap_servers = "{{kafka_brokers}}",
	kafka_group_id = "sink_ecommerce_purchase_product_customer_info_category-consumer_group",
	kafka_topic = "ecommerce-bought-all-category-rich-topic",
	encode = "json"
-- 	type = "rds",
-- 	username = "root",
-- 	password = "{{mysql_password}}",
-- 	db_url = "mysql://192.168.100.100:3306/{{ecommerce_schema}}",
-- 	table_name = "purchase_product_customer_info"
);


/**    
    OPERATIONS
	
**/

INSERT INTO temp_ecommerce_purchase_product_customer_info 
SELECT 
	purchase.session_uuid,
	purchase.transaction_uuid,
	purchase.my_timestamp,
	purchase.quantity,
	purchase.time_spent,
	prod.idProduct,
	purchase.product_identifier,
	prod.title,
	prod.brand,
	prod.price,
	ci.idCustomer,
	ci.gender,
	ci.age, 
	CASE
    WHEN ci.age < 18 THEN 'Kids'
    WHEN ci.age >= 18 AND ci.age < 30 THEN 'Youth'
    WHEN ci.age >= 30 AND ci.age < 45 THEN 'Mid age'
    WHEN ci.age >= 45 AND ci.age < 65 THEN 'Old age'
    ELSE 'Problems'
    END AS age_category,
	ci.country,
	ci.city
FROM source_ecommerce_purchase purchase 
LEFT JOIN dimension_ecommerce_product prod ON purchase.product_identifier = prod.product_identifier
LEFT JOIN dimension_ecommerce_customer_info ci ON purchase.idUser = ci.idCustomer;


-- INSERT INTO sink_ecommerce_purchase_product_customer_info
-- SELECT * FROM temp_ecommerce_purchase_product_customer_info;


INSERT INTO sink_ecommerce_purchase_product_customer_info_category 
SELECT 
	temp_purchase.session_uuid,
	temp_purchase.transaction_uuid,
	temp_purchase.my_timestamp,
	temp_purchase.quantity,
	temp_purchase.time_spent,
	temp_purchase.idProduct,
	temp_purchase.product_identifier,
	temp_purchase.title,
	temp_purchase.brand,
	temp_purchase.price,
	temp_purchase.idCustomer,
	temp_purchase.gender,
	temp_purchase.age, 
	temp_purchase.age_category,
	temp_purchase.country,
	temp_purchase.city,
	cat.idCategory,
	cat.category
FROM temp_ecommerce_purchase_product_customer_info temp_purchase 
LEFT JOIN dimension_ecommerce_category cat ON temp_purchase.product_identifier = cat.product_identifier;


INSERT INTO sink_ecommerce_purchase_product_customer_info_all_category 
SELECT 
	temp_purchase.session_uuid,
	temp_purchase.transaction_uuid,
	temp_purchase.my_timestamp,
	temp_purchase.quantity,
	temp_purchase.time_spent,
	temp_purchase.idProduct,
	temp_purchase.product_identifier,
	temp_purchase.title,
	temp_purchase.brand,
	temp_purchase.price,
	temp_purchase.idCustomer,
	temp_purchase.gender,
	temp_purchase.age, 
	temp_purchase.age_category,
	temp_purchase.country,
	temp_purchase.city,
	cat.idCategory,
	cat.category,
	cat.subcategory
FROM temp_ecommerce_purchase_product_customer_info temp_purchase 
LEFT JOIN dimension_ecommerce_category cat ON temp_purchase.product_identifier = cat.product_identifier;

